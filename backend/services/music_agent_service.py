import google.generativeai as genai
import os
import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
from services.navidrome_service import NavidromeService
from services.listenbrainz_service import ListenBrainzService
from services.musicbrainz_service import MusicBrainzService
from services.conversation_manager import ConversationManager
from services.system_prompts import SystemPrompts

class MusicAgentService:
    """
    Agente musical inteligente que combina todas las fuentes de datos
    para responder consultas conversacionales sobre m√∫sica
    """
    
    def __init__(self):
        genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
        self.model = genai.GenerativeModel('gemini-2.0-flash-exp')
        
        # Gestor de conversaciones
        self.conversation_manager = ConversationManager()
        
        # Inicializar servicios disponibles
        self.navidrome = NavidromeService()
        
        self.listenbrainz = None
        listenbrainz_available = False
        if os.getenv("LISTENBRAINZ_USERNAME"):
            try:
                self.listenbrainz = ListenBrainzService()
                print("‚úÖ Agente musical: ListenBrainz configurado")
                listenbrainz_available = True
            except Exception as e:
                print(f"‚ö†Ô∏è Agente musical: Error inicializando ListenBrainz: {e}")
        
        # Determinar servicios para cada prop√≥sito
        # HISTORIAL Y DESCUBRIMIENTO: ListenBrainz (open-source, sin l√≠mites)
        if listenbrainz_available and self.listenbrainz:
            self.history_service = self.listenbrainz
            self.history_service_name = "ListenBrainz"
            self.discovery_service = self.listenbrainz
        else:
            self.history_service = None
            self.history_service_name = None
            self.discovery_service = None
        
        # MUSICBRAINZ: Para verificaci√≥n de metadatos
        self.musicbrainz = None
        if os.getenv("ENABLE_MUSICBRAINZ", "true").lower() == "true":
            try:
                self.musicbrainz = MusicBrainzService()
                print("‚úÖ Agente musical: MusicBrainz habilitado para verificaci√≥n de metadatos")
            except Exception as e:
                print(f"‚ö†Ô∏è Agente musical: Error inicializando MusicBrainz: {e}")
        
        # Sistema de cach√© simple con TTL para optimizar rendimiento
        self._cache = {}
        self._cache_ttl = {}
        
        print(f"üìä Servicio de historial: {self.history_service_name if self.history_service_name else 'No disponible'}")
        print(f"üîç Servicio de descubrimiento: {'ListenBrainz' if self.discovery_service else 'No disponible'}")
    
    def _get_cache(self, key: str, ttl_seconds: int = 300):
        """Obtener del cach√© si no ha expirado
        
        Args:
            key: Clave del cach√©
            ttl_seconds: Tiempo de vida en segundos (default: 5 minutos)
            
        Returns:
            Valor del cach√© o None si expir√≥ o no existe
        """
        if key in self._cache:
            if key in self._cache_ttl:
                if datetime.now() < self._cache_ttl[key]:
                    print(f"‚ö° Cache hit: {key}")
                    return self._cache[key]
        return None
    
    def _set_cache(self, key: str, value: any, ttl_seconds: int = 300):
        """Guardar en cach√© con TTL
        
        Args:
            key: Clave del cach√©
            value: Valor a guardar
            ttl_seconds: Tiempo de vida en segundos (default: 5 minutos)
        """
        self._cache[key] = value
        self._cache_ttl[key] = datetime.now() + timedelta(seconds=ttl_seconds)
    
    async def _get_with_fallback(self, primary_method, fallback_method, *args, **kwargs):
        """Intenta ejecutar un m√©todo con fallback autom√°tico si falla
        
        Args:
            primary_method: M√©todo principal a ejecutar
            fallback_method: M√©todo de fallback si el principal falla
            *args, **kwargs: Argumentos para los m√©todos
            
        Returns:
            Resultado del m√©todo que funcione
        """
        try:
            if primary_method:
                result = await primary_method(*args, **kwargs)
                if result:  # Si devuelve datos, usarlos
                    return result
        except Exception as e:
            print(f"‚ö†Ô∏è M√©todo principal fall√≥ ({e}), usando fallback...")
        
        # Intentar con fallback
        try:
            if fallback_method:
                return await fallback_method(*args, **kwargs)
        except Exception as e:
            print(f"‚ö†Ô∏è Fallback tambi√©n fall√≥: {e}")
        
        return []  # Devolver lista vac√≠a si ambos fallan
    
    async def query(
        self, 
        user_question: str, 
        user_id: int,
        context: Optional[Dict] = None
    ) -> Dict[str, Any]:
        """
        Procesar consulta del usuario usando todas las fuentes disponibles
        CON SOPORTE CONVERSACIONAL
        
        Args:
            user_question: Pregunta o consulta del usuario
            user_id: ID del usuario para mantener contexto conversacional
            context: Contexto adicional (opcional)
            
        Returns:
            Diccionario con la respuesta y datos utilizados
            
        Ejemplos:
            - "¬øQu√© √°lbumes de Pink Floyd tengo en mi biblioteca?"
            - "Dame informaci√≥n sobre el √∫ltimo artista que escuch√©"
            - "¬øCu√°ntas veces he escuchado a Queen?"
            - "Dime √°lbumes similares a The Dark Side of the Moon"
            - "Ponme algo parecido" (usa contexto de conversaci√≥n)
        """
        
        print(f"ü§ñ Agente musical procesando: {user_question}")
        
        # Obtener sesi√≥n conversacional del usuario
        session = self.conversation_manager.get_session(user_id)
        session.add_message("user", user_question)
        
        # 1. Recopilar datos de todas las fuentes
        # OPTIMIZACI√ìN: Agregar timeout de 20 segundos para evitar esperas muy largas
        try:
            data_context = await asyncio.wait_for(
                self._gather_all_data(user_question, user_id),
                timeout=20.0
            )
        except asyncio.TimeoutError:
            print("‚ö†Ô∏è Timeout obteniendo datos (20s), usando datos parciales")
            data_context = {
                "library": {},
                "listening_history": {},
                "search_results": {},
                "similar_content": [],
                "new_discoveries": []
            }
        
        # Si el usuario pidi√≥ "busca m√°s" pero no hay b√∫squeda anterior
        if data_context.get("no_active_search"):
            return {
                "answer": data_context.get("message"),
                "data_used": {},
                "links": [],
                "success": True,
                "session_id": user_id
            }
        
        # 2. Obtener estad√≠sticas del usuario con contexto adaptativo en 3 niveles
        # NIVEL 1: Contexto m√≠nimo (SIEMPRE, muy r√°pido con cach√© largo)
        user_stats = await self._get_minimal_context(user_id)
        
        # NIVEL 2: Contexto enriquecido (cuando hay palabras clave de recomendaci√≥n)
        needs_user_context = any(phrase in user_question.lower() for phrase in [
            "recomienda", "recomi√©ndame", "sugerencia", "sugiere",
            "ponme", "parecido", "similar", "nuevo", "descubrir",
            "mis gustos", "mi perfil", "personalizado"
        ])
        
        if needs_user_context:
            print("üìä Enriqueciendo contexto (recomendaci√≥n detectada)...")
            user_stats = await self._get_enriched_context(user_id, user_stats)
        
        # NIVEL 3: Contexto completo (cuando se pregunta expl√≠citamente)
        needs_full_context = any(phrase in user_question.lower() for phrase in [
            "mi biblioteca", "qu√© tengo", "mis escuchas", "mis estad√≠sticas",
            "mi perfil musical", "qu√© he escuchado", "cu√°nto he escuchado",
            "mis favoritos", "mis stats"
        ])
        
        if needs_full_context:
            print("üìö Obteniendo contexto completo (consulta de perfil)...")
            user_stats = await self._get_full_context(user_id, user_stats)
        
        # 3. Construir prompt inteligente usando SystemPrompts
        conversation_context = session.get_context_for_ai()
        
        # Usar prompt espec√≠fico para consultas informativas
        if context and context.get("type") == "informational":
            system_prompt = SystemPrompts.get_informational_prompt(
                user_stats=user_stats,
                conversation_context=conversation_context
            )
        else:
            system_prompt = SystemPrompts.get_music_assistant_prompt(
                user_stats=user_stats,
                conversation_context=conversation_context
            )
        
        # 4. Agregar datos espec√≠ficos de la query
        ai_prompt = f"""{system_prompt}

=== CONSULTA ACTUAL ===
{user_question}

=== DATOS DISPONIBLES ===
{self._format_context_for_ai(data_context)}

REGLAS CR√çTICAS:
1. SIEMPRE consulta PRIMERO la biblioteca (üìö) para ver qu√© tiene el usuario
2. LUEGO complementa con ListenBrainz/MusicBrainz (üåç) para recomendaciones y descubrimientos
3. Si preguntan "mejor disco/√°lbum de X":
   a) Verifica QU√â TIENE en biblioteca de ese artista
   b) Combina con informaci√≥n de MusicBrainz
   c) Responde: "En tu biblioteca tienes X, Y, Z. Seg√∫n MusicBrainz, el mejor es..."
4. Si preguntan "qu√© tengo de X" ‚Üí USA SOLO BIBLIOTECA
5. NUNCA digas "no tienes nada" sin VERIFICAR primero en los datos de biblioteca
6. VERIFICA coincidencia exacta de artistas - no mezcles artistas diferentes
7. S√© PROACTIVO: combina siempre biblioteca + descubrimiento

IMPORTANTE - Diferentes tipos de peticiones:

1. "¬øQu√© √°lbumes TENGO de [artista]?"
   ‚Üí Busca SOLO en BIBLIOTECA
   ‚Üí Si no tiene ‚Üí "No tienes √°lbumes de [artista] en tu biblioteca"

2. "Recomi√©ndame un disco DE [artista]"
   ‚Üí Busca en BIBLIOTECA primero
   ‚Üí Si no tiene ‚Üí Busca en MUSICBRAINZ y recomienda
   ‚Üí Ejemplo: "No tienes de [artista] en biblioteca, pero en MusicBrainz su mejor √°lbum es X"

3. "Recomi√©ndame un disco" (sin artista espec√≠fico)
   ‚Üí USA BIBLIOTECA + LISTENBRAINZ/MUSICBRAINZ
   ‚Üí Combina: algo de su biblioteca + descubrimientos nuevos
   ‚Üí Ejemplo: "De tu biblioteca: X. Tambi√©n te gustar√° Y (descubrimiento nuevo)"

4. "Recomi√©ndame algo nuevo / que no tenga"
   ‚Üí USA PRINCIPALMENTE LISTENBRAINZ/MUSICBRAINZ
   ‚Üí Recomienda m√∫sica que NO est√° en biblioteca
   ‚Üí Basado en sus gustos pero nuevo contenido

IMPORTANTE - "Playlist con m√∫sica DE [artistas]":
- Si piden "playlist de/con [lista de artistas]", busca canciones de ESOS ARTISTAS ESPEC√çFICOS
- Ejemplo: "m√∫sica de mujeres, vera fauna y cala vento" ‚Üí busca canciones de esos 3 artistas
- VERIFICA que cada canci√≥n sea del artista correcto
- Si NO tienes algunos artistas, menciona cu√°les S√ç tienes y cu√°les NO

IMPORTANTE - CREACI√ìN DE PLAYLISTS:
- Cuando el usuario pida crear una playlist, el sistema AUTOM√ÅTICAMENTE crear√° la playlist en Navidrome
- Tu respuesta debe incluir las canciones que se van a agregar a la playlist
- S√© espec√≠fico sobre qu√© canciones se incluir√°n y por qu√©
- Si no hay suficientes canciones, explica por qu√© y sugiere alternativas

FORMATO DE RESPUESTA:
- Si hay √°lbumes en biblioteca DEL ARTISTA CORRECTO ‚Üí Lista y recomienda
- Si hay artistas en biblioteca ‚Üí Lista los artistas directamente
- Si piden "recomi√©ndame √°lbum de X" y NO tienes de X ‚Üí "No tienes √°lbumes de X en tu biblioteca"
- Si piden "playlist con X, Y, Z" ‚Üí Lista qu√© artistas S√ç tienes y cu√°les NO
- NUNCA inventes √°lbumes o artistas que no aparecen en los datos
- Usa emojis: üìÄ para √°lbumes, üé§ para artistas, üéµ para canciones

Responde ahora de forma natural y conversacional:"""
        
        # 5. Generar respuesta con IA
        try:
            response = self.model.generate_content(ai_prompt)
            answer = response.text.strip()
            
            print(f"‚úÖ Agente musical: Respuesta generada ({len(answer)} caracteres)")
            
            # 6. NUEVO: Si es una petici√≥n de playlist, crear la playlist en Navidrome
            playlist_created = None
            is_playlist_request = any(phrase in user_question.lower() for phrase in [
                "playlist", "crea una playlist", "crear playlist", "haz una playlist", 
                "hacer playlist", "genera playlist", "generar playlist"
            ])
            
            if is_playlist_request:
                playlist_created = await self._create_playlist_in_navidrome(
                    user_question, data_context, user_id
                )
                
                # Si se cre√≥ la playlist, agregar informaci√≥n al mensaje
                if playlist_created:
                    answer += f"\n\nüéµ <b>Playlist creada en Navidrome:</b> {playlist_created['name']}\n"
                    answer += f"üìù <b>Canciones incluidas:</b> {playlist_created['track_count']}\n"
                    answer += f"üÜî <b>ID de playlist:</b> {playlist_created['id']}"
            
            # Guardar respuesta en historial de conversaci√≥n
            session.add_message("assistant", answer)
            
            return {
                "answer": answer,
                "data_used": data_context,
                "links": self._extract_links(data_context),
                "success": True,
                "session_id": user_id,
                "playlist_created": playlist_created
            }
        
        except Exception as e:
            print(f"‚ùå Error generando respuesta del agente: {e}")
            return {
                "answer": f"‚ùå Error procesando tu consulta: {str(e)}",
                "data_used": data_context,
                "links": [],
                "success": False
            }
    
    async def _gather_all_data(self, query: str, user_id: int) -> Dict[str, Any]:
        """Recopilar datos de todas las fuentes disponibles
        
        Args:
            query: Consulta del usuario para determinar qu√© datos recopilar
            user_id: ID del usuario (para mantener contexto de b√∫squeda)
            
        Returns:
            Diccionario con todos los datos relevantes
        """
        data = {
            "library": {},
            "listening_history": {},
            "search_results": {},
            "similar_content": [],
            "new_discoveries": []  # NUEVO: Para m√∫sica que no est√° en biblioteca
        }
        
        # Detectar palabras clave para optimizar b√∫squedas
        query_lower = query.lower()
        
        # Detectar comando "busca m√°s"
        is_search_more = any(phrase in query_lower for phrase in [
            "busca m√°s", "buscar m√°s", "busca mas", "buscar mas",
            "m√°s resultados", "m√°s artistas", "continuar", "sigue buscando"
        ])
        
        # Obtener sesi√≥n para contexto
        session = self.conversation_manager.get_session(user_id)
        
        if is_search_more:
            print(f"üîç Comando 'busca m√°s' detectado")
            last_search = session.context.get("last_mb_search", {})
            
            if last_search.get("genre") and last_search.get("has_more"):
                # Continuar b√∫squeda anterior
                detected_genre = last_search["genre"]
                needs_library_search = True
                is_recommendation_request = False
                search_term = None
                mb_offset = last_search["next_offset"]
                print(f"   Continuando b√∫squeda de '{detected_genre}' desde artista {mb_offset}")
            else:
                print(f"   ‚ö†Ô∏è No hay b√∫squeda anterior para continuar")
                # Responder que no hay b√∫squeda activa
                data["no_active_search"] = True
                data["message"] = "No hay ninguna b√∫squeda activa que continuar. Primero pregunta por un g√©nero, por ejemplo: '¬øtengo algo de jazz?'"
                return data
        else:
            mb_offset = 0  # Nueva b√∫squeda, empezar desde 0
            
            # Detectar si es una petici√≥n de RECOMENDACI√ìN
            is_recommendation_request = any(word in query_lower for word in [
                "recomienda", "recomi√©ndame", "sugerencia", "sugiere", "sugi√©reme",
                "ponme", "pon", "quiero escuchar", "dame"
            ])
        print(f"üîç DEBUG - is_recommendation_request: {is_recommendation_request}")
        
        # Detectar g√©neros musicales comunes
        music_genres = {
            'rock', 'pop', 'jazz', 'blues', 'metal', 'punk', 'indie', 'folk',
            'electr√≥nica', 'electronica', 'house', 'techno', 'hip hop', 'rap',
            'reggae', 'country', 'cl√°sica', 'clasica', 'alternativo', 'alternativa',
            'ska', 'soul', 'funk', 'grunge', 'progressive', 'prog'
        }
        detected_genre = None
        for genre in music_genres:
            if genre in query_lower:
                detected_genre = genre
                break
        
        # IMPORTANTE: "disco" puede ser g√©nero (Disco Music) o la palabra espa√±ola para "√°lbum"
        # Solo detectar como g√©nero si est√° en contexto espec√≠fico de g√©nero musical
        if 'disco' in query_lower and detected_genre is None:
            # Es g√©nero solo si aparece en contextos como:
            # "m√∫sica disco", "estilo disco", "g√©nero disco", "de los 70", etc.
            genre_contexts = ['m√∫sica disco', 'estilo disco', 'g√©nero disco', 'm√∫sica de disco', 'tipo disco']
            if any(context in query_lower for context in genre_contexts):
                detected_genre = 'disco'
            # Si dice "un disco de X" o "disco de X", NO es g√©nero, es √°lbum
            elif 'disco de' in query_lower or 'un disco' in query_lower or 'el disco' in query_lower:
                detected_genre = None  # Confirmar que no es g√©nero
        
        print(f"üîç DEBUG - detected_genre: '{detected_genre}'")
        
        # Detectar menciones de artistas/√°lbumes/discos (buscar en biblioteca)
        needs_library_search = any(word in query_lower for word in [
            "tengo", "teengo", "biblioteca", "colecci√≥n", "poseo", 
            "√°lbum", "album", "disco", "√°lbumes", "albums", "discos",
            "mejor disco de", "mejor √°lbum de", "disco de", "√°lbum de",
            "discograf√≠a", "m√∫sica de", "canciones de", "temas de", "mi biblioteca",
            "playlist", "crea una playlist", "crear playlist"  # Para playlists SIEMPRE de biblioteca
        ])
        print(f"üîç DEBUG - needs_library_search: {needs_library_search}")
        
        # Detectar consultas informativas que necesitan biblioteca completa
        is_informational_query = any(phrase in query_lower for phrase in [
            "qu√© g√©neros", "qu√© artistas", "cu√°ntos √°lbumes", "lista de", "qu√© tengo de",
            "cu√°ntos artistas", "cu√°ntas canciones", "estad√≠sticas de mi biblioteca",
            "resumen de mi biblioteca", "an√°lisis de mi biblioteca", "que hay de",
            "qu√© hay de", "tengo de", "tienes de", "en mi biblioteca", "de mi biblioteca",
            "que tengo de", "qu√© tengo de", "tengo de la", "tengo del", "tengo de los",
            "tengo de las", "tienes de la", "tienes del", "tienes de los", "tienes de las"
        ])
        print(f"üîç DEBUG - is_informational_query: {is_informational_query}")
        
        needs_listening_history = any(word in query_lower for word in [
            "escuch√©", "escuchado", "√∫ltima", "reciente", "top", "favorito", "estad√≠stica", "√∫ltimos"
        ])
        
        # Detectar cuando el usuario pide descubrir m√∫sica nueva (que NO tenga)
        needs_new_music = any(word in query_lower for word in [
            "nuevo", "nueva", "nuevos", "nuevas", "no tenga", "no tengo", "descubrir"
        ]) and not any(word in query_lower for word in ["mi biblioteca", "tengo", "teengo"])
        
        # Detectar cuando el usuario pregunta por lanzamientos recientes
        needs_recent_releases = any(word in query_lower for word in [
            "lanzamientos", "releases", "√∫ltimos", "recientes", "sacado", "han sacado"
        ]) or any(phrase in query_lower for phrase in [
            "qu√© hay nuevo", "m√∫sica nueva", "√∫ltimos √°lbumes", "nuevos lanzamientos"
        ])
        
        # Detectar cuando preguntan por reproducci√≥n actual
        needs_now_playing = any(word in query_lower for word in [
            "estoy escuchando", "est√° sonando", "suena ahora", "est√° reproduciendo",
            "reproduciendo", "playing", "now playing", "qu√© suena", "escuchando ahora",
            "sonando ahora", "qu√© est√° sonando", "reproduciendo ahora", "play ahora"
        ])
        
        # Extraer t√©rmino de b√∫squeda 
        # Si es recomendaci√≥n + g√©nero, no extraer t√©rmino (usar g√©nero)
        if is_recommendation_request and detected_genre:
            search_term = None  # No buscar artista espec√≠fico
        elif needs_library_search:
            search_term = self._extract_search_term(query)
            # Si el t√©rmino extra√≠do coincide con el g√©nero detectado, priorizar g√©nero
            if detected_genre and search_term and detected_genre.lower() in search_term.lower():
                search_term = None  # Es una b√∫squeda de g√©nero, no de artista
        else:
            search_term = None
        
        print(f"üîç DEBUG - search_term extra√≠do: '{search_term}'")
        
        # Datos de reproducci√≥n actual (Navidrome)
        if needs_now_playing:
            try:
                print(f"üéµ Obteniendo reproducci√≥n actual...")
                now_playing = await self.navidrome.get_now_playing()
                data["now_playing"] = now_playing
                print(f"‚úÖ Obtenida informaci√≥n de {len(now_playing)} reproducciones activas")
            except Exception as e:
                print(f"‚ö†Ô∏è Error obteniendo now playing: {e}")
                data["now_playing"] = []
        
        # Datos de biblioteca completa para consultas informativas (PRIORIDAD ALTA)
        if is_informational_query:
            try:
                print(f"üìä Obteniendo biblioteca completa para consulta informativa...")
                
                # Obtener TODA la biblioteca
                all_artists = await self.navidrome.get_all_artists()
                all_albums = await self.navidrome.get_all_albums()
                all_tracks = await self.navidrome.get_all_tracks()
                
                # Organizar datos para an√°lisis
                data["library"]["complete_data"] = {
                    "artists": all_artists,
                    "albums": all_albums,
                    "tracks": all_tracks,
                    "total_artists": len(all_artists),
                    "total_albums": len(all_albums),
                    "total_tracks": len(all_tracks)
                }
                
                # Extraer g√©neros √∫nicos de todos los tracks
                genres = set()
                for track in all_tracks:
                    if track.genre:
                        genres.add(track.genre)
                
                data["library"]["complete_data"]["genres"] = sorted(list(genres))
                data["library"]["complete_data"]["total_genres"] = len(genres)
                
                # Extraer artistas √∫nicos
                unique_artists = set()
                for track in all_tracks:
                    if track.artist:
                        unique_artists.add(track.artist)
                
                data["library"]["complete_data"]["unique_artists"] = sorted(list(unique_artists))
                data["library"]["complete_data"]["unique_artists_count"] = len(unique_artists)
                
                # Si hay un g√©nero detectado en la consulta, marcar para an√°lisis inteligente
                if detected_genre:
                    print(f"üé∏ G√©nero detectado: '{detected_genre}' - Usando an√°lisis inteligente de IA")
                    
                    # En lugar de filtrar estrictamente, marcar el g√©nero para que la IA lo analice
                    data["library"]["complete_data"]["genre_query"] = {
                        "requested_genre": detected_genre,
                        "analysis_mode": "intelligent",  # La IA analizar√° toda la biblioteca
                        "total_artists": len(all_artists),
                        "total_albums": len(all_albums),
                        "total_tracks": len(all_tracks)
                    }
                    
                    print(f"‚úÖ Marcado para an√°lisis inteligente de '{detected_genre}' en {len(all_artists)} artistas, {len(all_albums)} √°lbumes, {len(all_tracks)} canciones")
                
                # Si hay un artista espec√≠fico mencionado en la consulta, filtrar por ese artista
                # PERO solo si NO es una consulta de g√©nero
                if not detected_genre:
                    artist_mentioned = self._extract_artist_from_query(query)
                    if artist_mentioned:
                        print(f"üé§ Filtrando biblioteca completa por artista: '{artist_mentioned}'")
                        
                        # Buscar artista por nombre (b√∫squeda flexible)
                        matching_artists = []
                        for artist in all_artists:
                            if artist_mentioned.lower() in artist.name.lower() or artist.name.lower() in artist_mentioned.lower():
                                matching_artists.append(artist)
                        
                        # Filtrar tracks del artista
                        artist_tracks = [track for track in all_tracks if track.artist and artist_mentioned.lower() in track.artist.lower()]
                        
                        # Filtrar √°lbumes del artista
                        artist_albums = [album for album in all_albums if album.artist and artist_mentioned.lower() in album.artist.lower()]
                        
                        data["library"]["complete_data"]["filtered_by_artist"] = {
                            "artist": artist_mentioned,
                            "matching_artists": matching_artists,
                            "tracks": artist_tracks,
                            "albums": artist_albums,
                            "total_tracks": len(artist_tracks),
                            "total_albums": len(artist_albums),
                            "total_matching_artists": len(matching_artists)
                        }
                        
                        print(f"‚úÖ Filtrado por '{artist_mentioned}': {len(artist_tracks)} canciones, {len(artist_albums)} √°lbumes, {len(matching_artists)} artistas coincidentes")
                
                print(f"‚úÖ Biblioteca completa obtenida: {len(all_artists)} artistas, {len(all_albums)} √°lbumes, {len(all_tracks)} canciones, {len(genres)} g√©neros")
                
            except Exception as e:
                print(f"‚ùå Error obteniendo biblioteca completa: {e}")
                data["library"]["complete_data"] = None
        
        # Datos de biblioteca (Navidrome) - b√∫squedas espec√≠ficas (solo si NO es consulta informativa)
        elif needs_library_search and not is_informational_query:
            try:
                # Si es recomendaci√≥n por g√©nero, buscar el g√©nero
                if is_recommendation_request and detected_genre and not search_term:
                    print(f"üîç Buscando en biblioteca por G√âNERO: '{detected_genre}' (query: '{query}')")
                    # Buscar por g√©nero (Navidrome puede buscar por tags/g√©neros)
                    search_results = await self.navidrome.search(detected_genre, limit=50)
                    data["library"]["search_results"] = search_results
                    data["library"]["search_term"] = detected_genre
                    data["library"]["is_genre_search"] = True
                    data["library"]["detected_genre"] = detected_genre
                    
                    if any(search_results.values()):
                        data["library"]["has_content"] = True
                        print(f"‚úÖ Encontrado {len(search_results.get('albums', []))} √°lbumes, {len(search_results.get('artists', []))} artistas de g√©nero '{detected_genre}'")
                    else:
                        data["library"]["has_content"] = False
                        print(f"‚ö†Ô∏è No se encontraron resultados para g√©nero '{detected_genre}'")
                        
                        # FALLBACK: Usar MusicBrainz para verificar si hay artistas del g√©nero
                        if self.musicbrainz:
                            print(f"   üéØ Activando MusicBrainz para verificar g√©nero '{detected_genre}'...")
                            mb_results = await self._search_genre_with_musicbrainz(detected_genre, offset=mb_offset)
                            if mb_results and mb_results.get("results"):
                                # Si MusicBrainz encuentra artistas, actualizar los resultados
                                results_data = mb_results["results"]
                                data["library"]["search_results"] = results_data
                                data["library"]["has_content"] = True
                                data["library"]["musicbrainz_verified"] = True
                                print(f"   ‚úÖ MusicBrainz encontr√≥ {len(results_data.get('albums', []))} √°lbumes, {len(results_data.get('artists', []))} artistas de '{detected_genre}'")
                                
                                # Guardar contexto para "busca m√°s"
                                session.context["last_mb_search"] = {
                                    "genre": detected_genre,
                                    "offset": mb_results["offset"],
                                    "next_offset": mb_results["next_offset"],
                                    "has_more": mb_results["has_more"],
                                    "total_artists": mb_results["total_artists"],
                                    "checked_total": mb_results["next_offset"]
                                }
                                
                                # Informaci√≥n para el prompt de la IA
                                if mb_results["has_more"]:
                                    data["library"]["can_search_more"] = True
                                    data["library"]["mb_stats"] = {
                                        "checked": mb_results["next_offset"],
                                        "total": mb_results["total_artists"],
                                        "remaining": mb_results["total_artists"] - mb_results["next_offset"]
                                    }
                
                # Si detect√≥ un g√©nero pero NO es recomendaci√≥n (ej: "tengo algo de jazz?")
                elif detected_genre and not search_term:
                    print(f"üîç Buscando en biblioteca por G√âNERO (no recomendaci√≥n): '{detected_genre}' (query: '{query}')")
                    # Buscar por g√©nero en Navidrome primero
                    search_results = await self.navidrome.search(detected_genre, limit=50)
                    data["library"]["search_term"] = detected_genre
                    data["library"]["is_genre_search"] = True
                    data["library"]["detected_genre"] = detected_genre
                    
                    local_albums_count = len(search_results.get('albums', []))
                    local_artists_count = len(search_results.get('artists', []))
                    
                    if any(search_results.values()):
                        print(f"‚úÖ B√∫squeda local: {local_albums_count} √°lbumes, {local_artists_count} artistas de '{detected_genre}'")
                    else:
                        print(f"‚ö†Ô∏è B√∫squeda local: 0 resultados para '{detected_genre}'")
                    
                    # SIEMPRE usar MusicBrainz para g√©neros (para complementar y permitir "busca m√°s")
                    if self.musicbrainz:
                        print(f"   üéØ Usando MusicBrainz para verificar m√°s artistas de '{detected_genre}'...")
                        mb_results = await self._search_genre_with_musicbrainz(detected_genre, offset=mb_offset)
                        
                        if mb_results and mb_results.get("results"):
                            # Combinar resultados locales + MusicBrainz (evitando duplicados)
                            results_data = mb_results["results"]
                            
                            # Combinar albums
                            combined_albums = list(search_results.get('albums', []))
                            existing_album_ids = {a.id for a in combined_albums}
                            for album in results_data.get('albums', []):
                                if album.id not in existing_album_ids:
                                    combined_albums.append(album)
                                    existing_album_ids.add(album.id)
                            
                            # Combinar artists
                            combined_artists = list(search_results.get('artists', []))
                            existing_artist_ids = {a.id for a in combined_artists}
                            for artist in results_data.get('artists', []):
                                if artist.id not in existing_artist_ids:
                                    combined_artists.append(artist)
                                    existing_artist_ids.add(artist.id)
                            
                            # Combinar tracks
                            combined_tracks = list(search_results.get('tracks', []))
                            existing_track_ids = {t.id for t in combined_tracks}
                            for track in results_data.get('tracks', []):
                                if track.id not in existing_track_ids:
                                    combined_tracks.append(track)
                                    existing_track_ids.add(track.id)
                            
                            # Usar resultados combinados
                            data["library"]["search_results"] = {
                                "albums": combined_albums,
                                "artists": combined_artists,
                                "tracks": combined_tracks
                            }
                            data["library"]["has_content"] = True
                            data["library"]["musicbrainz_verified"] = True
                            
                            mb_albums = len(results_data.get('albums', []))
                            mb_artists = len(results_data.get('artists', []))
                            print(f"   ‚úÖ MusicBrainz agreg√≥: {mb_albums} √°lbumes, {mb_artists} artistas")
                            print(f"   üìä Total combinado: {len(combined_albums)} √°lbumes, {len(combined_artists)} artistas")
                            
                            # Guardar contexto para "busca m√°s" SIEMPRE
                            session.context["last_mb_search"] = {
                                "genre": detected_genre,
                                "offset": mb_results["offset"],
                                "next_offset": mb_results["next_offset"],
                                "has_more": mb_results["has_more"],
                                "total_artists": mb_results["total_artists"],
                                "checked_total": mb_results["next_offset"]
                            }
                            
                            # Informaci√≥n para el prompt de la IA
                            if mb_results["has_more"]:
                                data["library"]["can_search_more"] = True
                                data["library"]["mb_stats"] = {
                                    "checked": mb_results["next_offset"],
                                    "total": mb_results["total_artists"],
                                    "remaining": mb_results["total_artists"] - mb_results["next_offset"]
                                }
                        else:
                            # MusicBrainz no encontr√≥ nada adicional, usar solo resultados locales
                            data["library"]["search_results"] = search_results
                            data["library"]["has_content"] = any(search_results.values())
                    else:
                        # MusicBrainz no disponible, usar solo resultados locales
                        data["library"]["search_results"] = search_results
                        data["library"]["has_content"] = any(search_results.values())
                
                # Si hay un artista espec√≠fico, buscar por artista
                elif search_term:
                    print(f"üîç Buscando en biblioteca por ARTISTA: '{search_term}' (query: '{query}')")
                    
                    # Generar variaciones del t√©rmino para b√∫squeda m√°s flexible
                    # Ej: "kaseo" ‚Üí ["kaseo", "kase.o", "kase o", "kase. o"]
                    search_variations = self._generate_search_variations(search_term)
                    print(f"üîç DEBUG - Variaciones de b√∫squeda: {search_variations}")
                    
                    # Buscar con todas las variaciones y combinar resultados
                    combined_results = {"tracks": [], "albums": [], "artists": []}
                    for variation in search_variations:
                        variation_results = await self.navidrome.search(variation, limit=20)
                        # Combinar resultados evitando duplicados
                        for result_type in ["tracks", "albums", "artists"]:
                            existing_ids = {item.id for item in combined_results[result_type]}
                            for item in variation_results.get(result_type, []):
                                if item.id not in existing_ids:
                                    combined_results[result_type].append(item)
                                    existing_ids.add(item.id)
                    
                    search_results = combined_results
                    
                    # DEBUG: Mostrar resultados crudos antes del filtro
                    print(f"üîç DEBUG - Resultados ANTES del filtro:")
                    print(f"   Tracks: {len(search_results.get('tracks', []))}")
                    print(f"   Albums: {len(search_results.get('albums', []))}")
                    if search_results.get('albums'):
                        for album in search_results.get('albums', [])[:3]:
                            print(f"     - {album.artist} - {album.name}")
                    print(f"   Artists: {len(search_results.get('artists', []))}")
                    
                    # FILTRAR resultados para mantener solo los que realmente coincidan
                    filtered_results = self._filter_relevant_results(search_results, search_term)
                    
                    # DEBUG: Mostrar resultados despu√©s del filtro
                    print(f"üîç DEBUG - Resultados DESPU√âS del filtro:")
                    print(f"   Tracks: {len(filtered_results.get('tracks', []))}")
                    print(f"   Albums: {len(filtered_results.get('albums', []))}")
                    if filtered_results.get('albums'):
                        for album in filtered_results.get('albums', [])[:3]:
                            print(f"     - {album.artist} - {album.name}")
                    print(f"   Artists: {len(filtered_results.get('artists', []))}")
                    
                    data["library"]["search_results"] = filtered_results
                    data["library"]["search_term"] = search_term
                    data["library"]["is_genre_search"] = False
                    
                    if any(filtered_results.values()):
                        data["library"]["has_content"] = True
                        print(f"‚úÖ Encontrado: {len(filtered_results.get('tracks', []))} tracks, {len(filtered_results.get('albums', []))} √°lbumes, {len(filtered_results.get('artists', []))} artistas")
                    else:
                        data["library"]["has_content"] = False
                        print(f"‚ö†Ô∏è No se encontraron resultados para '{search_term}'")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Error obteniendo datos de Navidrome: {e}")
                data["library"]["error"] = str(e)
        
        # Datos de escucha (ListenBrainz)
        if needs_listening_history:
            try:
                print(f"üìä Obteniendo historial de escucha...")
                
                # OPTIMIZACI√ìN: Paralelizar todas las llamadas
                tasks = []
                task_names = []
                
                # Recent tracks (siempre)
                if self.listenbrainz:
                    tasks.append(self.listenbrainz.get_recent_tracks(limit=20))
                    task_names.append("recent_tracks")
                
                # Top artists (siempre)
                if self.listenbrainz:
                    tasks.append(self.listenbrainz.get_top_artists(limit=10))
                    task_names.append("top_artists")
                
                # Top tracks (solo si se necesita)
                if "canci√≥n" in query_lower or "track" in query_lower or "tema" in query_lower:
                    if self.listenbrainz:
                        tasks.append(self.listenbrainz.get_top_tracks(limit=10))
                        task_names.append("top_tracks")
                
                # Stats (solo si se necesita)
                if "estad√≠stica" in query_lower or "stats" in query_lower or "cu√°nto" in query_lower:
                    if self.listenbrainz and hasattr(self.listenbrainz, 'get_user_stats'):
                        tasks.append(self.listenbrainz.get_user_stats())
                        task_names.append("stats")
                
                # Ejecutar todas las tareas en paralelo
                results = await asyncio.gather(*tasks, return_exceptions=True)
                
                # Procesar resultados
                for i, result in enumerate(results):
                    if not isinstance(result, Exception) and result:
                        data["listening_history"][task_names[i]] = result
                    else:
                        data["listening_history"][task_names[i]] = [] if task_names[i] != "stats" else {}
                
                service_used = "ListenBrainz" if self.listenbrainz and data["listening_history"].get("recent_tracks") else "Ninguno"
                print(f"‚úÖ Historial obtenido desde: {service_used}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error obteniendo historial de escucha: {e}")
                data["listening_history"]["error"] = str(e)
        
        # B√∫squeda de contenido similar (ListenBrainz CF)
        if self.discovery_service and ("similar" in query_lower or "parecido" in query_lower or "como" in query_lower):
            try:
                print(f"üîç Buscando contenido similar en ListenBrainz")
                # Extraer nombre de artista/√°lbum de la query
                words = query.split()
                for i, word in enumerate(words):
                    if word.lower() in ["similar", "parecido", "como"] and i + 1 < len(words):
                        potential_artist = " ".join(words[i+1:])
                        similar_artists = await self.discovery_service.get_similar_artists_from_recording(
                            potential_artist, 
                            limit=5,
                            musicbrainz_service=self.musicbrainz
                        )
                        if similar_artists:
                            data["similar_content"] = similar_artists
                        break
            except Exception as e:
                print(f"‚ö†Ô∏è Error buscando contenido similar: {e}")
        
        # Buscar informaci√≥n de MusicBrainz sobre artistas espec√≠ficos cuando preguntan por "mejor disco/√°lbum"
        if self.musicbrainz and needs_library_search and search_term and any(word in query_lower for word in ["mejor", "recomend"]):
            try:
                print(f"üåç Buscando informaci√≥n en MusicBrainz para '{search_term}'...")
                # Obtener top √°lbumes del artista desde MusicBrainz
                top_albums = await self.musicbrainz.get_artist_top_albums(search_term, limit=10)
                if top_albums:
                    data["musicbrainz_artist_info"] = {
                        "artist": search_term,
                        "top_albums": top_albums
                    }
                    print(f"‚úÖ Encontrados {len(top_albums)} √°lbumes de '{search_term}' en MusicBrainz")
            except Exception as e:
                print(f"‚ö†Ô∏è Error obteniendo info de MusicBrainz para '{search_term}': {e}")
        
        # Buscar lanzamientos recientes cuando lo pidan
        if needs_recent_releases:
            try:
                print(f"üÜï Buscando lanzamientos recientes...")
                
                # Obtener artistas de la biblioteca (TODOS para lanzamientos recientes)
                library_artists = []
                if self.navidrome:
                    artists = await self.navidrome.get_all_artists()
                    library_artists = [artist.name for artist in artists if artist.name]
                
                if library_artists and self.musicbrainz:
                    print(f"   üìö Artistas en biblioteca: {len(library_artists)}")
                    
                    # Buscar lanzamientos recientes de artistas de la biblioteca
                    recent_releases = await self.musicbrainz.get_recent_releases_for_artists(
                        library_artists, 
                        days=30  # √öltimos 30 d√≠as
                    )
                    
                    if recent_releases:
                        data["recent_releases"] = recent_releases[:10]  # M√°ximo 10
                        print(f"‚úÖ Encontrados {len(recent_releases)} lanzamientos recientes")
                    else:
                        print("‚ö†Ô∏è No se encontraron lanzamientos recientes")
                        data["recent_releases"] = []
                else:
                    print("‚ö†Ô∏è No hay artistas en biblioteca o MusicBrainz no disponible")
                    data["recent_releases"] = []
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error buscando lanzamientos recientes: {e}")
                data["recent_releases"] = []
        
        # Buscar m√∫sica nueva activamente cuando lo pidan
        if needs_new_music:
            try:
                print(f"üåç Buscando m√∫sica NUEVA basada en gustos del usuario...")
                
                # Obtener top artistas del historial
                top_artists = []
                if self.listenbrainz:
                    top_artists = await self.listenbrainz.get_top_artists(limit=5)
                
                # Buscar artistas similares usando ListenBrainz para descubrimiento
                if top_artists and self.discovery_service:
                    # OPTIMIZACI√ìN: Paralelizar b√∫squeda de artistas similares
                    similar_tasks = []
                    for top_artist in top_artists[:3]:  # Solo los top 3
                        similar_tasks.append(
                            self.discovery_service.get_similar_artists_from_recording(
                                top_artist.name, 
                                limit=3,
                                musicbrainz_service=self.musicbrainz
                            )
                        )
                    
                    # Ejecutar b√∫squedas en paralelo
                    similar_results = await asyncio.gather(*similar_tasks, return_exceptions=True)
                    
                    # Procesar resultados
                    new_discoveries = []
                    for i, similar_artists in enumerate(similar_results):
                        if isinstance(similar_artists, Exception):
                            print(f"‚ö†Ô∏è Error obteniendo similares: {similar_artists}")
                            continue
                        
                        top_artist = top_artists[i]
                        
                        # OPTIMIZACI√ìN: Paralelizar obtenci√≥n de √°lbumes top
                        album_tasks = []
                        valid_artists = []
                        for artist in similar_artists:
                            if artist.name not in [d.get('artist') for d in new_discoveries]:
                                valid_artists.append(artist)
                                album_tasks.append(
                                    self.discovery_service.get_artist_top_albums(artist.name, limit=1)
                                )
                            
                            if len(valid_artists) >= 3:  # M√°ximo 3 por top artist
                                break
                        
                        # Obtener √°lbumes en paralelo
                        if album_tasks:
                            album_results = await asyncio.gather(*album_tasks, return_exceptions=True)
                            
                            for j, top_albums in enumerate(album_results):
                                if not isinstance(top_albums, Exception) and j < len(valid_artists):
                                    artist = valid_artists[j]
                                    discovery = {
                                        'artist': artist.name,
                                        'url': artist.url if hasattr(artist, 'url') else None,
                                        'top_album': top_albums[0].get('name') if top_albums else None,
                                        'album_url': top_albums[0].get('url') if top_albums else None,
                                        'similar_to': top_artist.name
                                    }
                                    new_discoveries.append(discovery)
                                    
                                    if len(new_discoveries) >= 8:
                                        break
                        
                        if len(new_discoveries) >= 8:
                            break
                    
                    if new_discoveries:
                        data["new_discoveries"] = new_discoveries[:8]
                        print(f"‚úÖ Encontrados {len(data['new_discoveries'])} descubrimientos con √°lbums espec√≠ficos")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error buscando m√∫sica nueva: {e}")
        
        return data
    
    def _format_context_for_ai(self, data: Dict[str, Any]) -> str:
        """Formatear contexto para que la IA lo entienda
        
        Args:
            data: Diccionario con todos los datos recopilados
            
        Returns:
            String formateado con toda la informaci√≥n para la IA
        """
        formatted = ""
        
        # Reproducci√≥n actual (si se pregunt√≥ por ello)
        if data.get("now_playing") is not None:
            formatted += f"\nüéµ === REPRODUCCI√ìN ACTUAL ===\n"
            now_playing = data["now_playing"]
            if now_playing:
                formatted += f"‚úÖ Hay {len(now_playing)} reproducci√≥n(es) activa(s):\n\n"
                for i, entry in enumerate(now_playing, 1):
                    formatted += f"  {i}. {entry['artist']} - {entry['track']}"
                    if entry.get('album'):
                        formatted += f" (de {entry['album']})"
                    formatted += f"\n     üë§ Usuario: {entry['username']}"
                    formatted += f" | üéß Reproductor: {entry['player_name']}"
                    if entry.get('minutes_ago') == 0:
                        formatted += f" | ‚ñ∂Ô∏è Reproduciendo ahora mismo"
                    elif entry.get('minutes_ago'):
                        formatted += f" | ‚è±Ô∏è Comenz√≥ hace {entry['minutes_ago']} minuto(s)"
                    if entry.get('duration'):
                        mins = entry['duration'] // 60
                        secs = entry['duration'] % 60
                        formatted += f" | ‚è≥ Duraci√≥n: {mins}:{secs:02d}"
                    formatted += "\n"
                formatted += "\n"
            else:
                formatted += "  ‚ö†Ô∏è No hay nada reproduci√©ndose en este momento\n"
                formatted += "  üí° Aseg√∫rate de tener reproductores conectados y activos en Navidrome\n\n"
        
        # SIEMPRE mostrar primero la biblioteca (si hay b√∫squeda o datos completos)
        if data.get("library"):
            lib = data["library"]
            search_term = lib.get("search_term", "")
            is_genre_search = lib.get("is_genre_search", False)
            detected_genre = lib.get("detected_genre", "")
            
            # Si hay datos completos de biblioteca (consultas informativas)
            if lib.get("complete_data"):
                complete_data = lib["complete_data"]
                formatted += f"\nüìö === BIBLIOTECA COMPLETA ===\n"
                formatted += f"üìä <b>ESTAD√çSTICAS GENERALES:</b>\n"
                formatted += f"‚Ä¢ <b>Total de artistas:</b> {complete_data['total_artists']}\n"
                formatted += f"‚Ä¢ <b>Total de √°lbumes:</b> {complete_data['total_albums']}\n"
                formatted += f"‚Ä¢ <b>Total de canciones:</b> {complete_data['total_tracks']}\n"
                formatted += f"‚Ä¢ <b>Total de g√©neros:</b> {complete_data['total_genres']}\n\n"
                
                # Mostrar g√©neros √∫nicos
                if complete_data.get("genres"):
                    formatted += f"üé∏ <b>G√âNEROS EN TU BIBLIOTECA ({complete_data['total_genres']}):</b>\n"
                    for i, genre in enumerate(complete_data["genres"][:20], 1):  # Mostrar primeros 20
                        formatted += f"  {i}. {genre}\n"
                    if complete_data['total_genres'] > 20:
                        formatted += f"  ... y {complete_data['total_genres'] - 20} g√©neros m√°s\n"
                    formatted += "\n"
                
                # Mostrar artistas √∫nicos (primeros 30)
                if complete_data.get("unique_artists"):
                    formatted += f"üé§ <b>ARTISTAS EN TU BIBLIOTECA ({complete_data['unique_artists_count']}):</b>\n"
                    for i, artist in enumerate(complete_data["unique_artists"][:30], 1):  # Mostrar primeros 30
                        formatted += f"  {i}. {artist}\n"
                    if complete_data['unique_artists_count'] > 30:
                        formatted += f"  ... y {complete_data['unique_artists_count'] - 30} artistas m√°s\n"
                    formatted += "\n"
                
                # Si hay una consulta de g√©nero, proporcionar informaci√≥n para an√°lisis inteligente
                if complete_data.get("genre_query"):
                    genre_query = complete_data["genre_query"]
                    requested_genre = genre_query["requested_genre"]
                    
                    formatted += f"\nüé∏ <b>CONSULTA DE G√âNERO: {requested_genre.upper()}</b>\n"
                    formatted += f"üí° <b>INSTRUCCIONES PARA LA IA:</b>\n"
                    formatted += f"‚Ä¢ El usuario pregunta por m√∫sica de g√©nero '{requested_genre}'\n"
                    formatted += f"‚Ä¢ Analiza TODA la biblioteca ({genre_query['total_artists']} artistas, {genre_query['total_albums']} √°lbumes, {genre_query['total_tracks']} canciones)\n"
                    formatted += f"‚Ä¢ Busca artistas que puedan estar relacionados con '{requested_genre}' aunque no est√©n etiquetados exactamente as√≠\n"
                    formatted += f"‚Ä¢ Considera variaciones, subg√©neros, estilos relacionados y artistas similares\n"
                    formatted += f"‚Ä¢ Usa tu conocimiento musical para identificar conexiones\n\n"
                    
                    # Proporcionar muestra de artistas para que la IA analice
                    if complete_data.get("unique_artists"):
                        formatted += f"üé§ <b>MUESTRA DE ARTISTAS PARA AN√ÅLISIS (primeros 50):</b>\n"
                        for i, artist in enumerate(complete_data["unique_artists"][:50], 1):
                            formatted += f"  {i}. {artist}\n"
                        if complete_data['unique_artists_count'] > 50:
                            formatted += f"  ... y {complete_data['unique_artists_count'] - 50} artistas m√°s para analizar\n"
                        formatted += "\n"
                    
                    # Proporcionar muestra de g√©neros para contexto
                    if complete_data.get("genres"):
                        formatted += f"üéµ <b>G√âNEROS DISPONIBLES EN LA BIBLIOTECA:</b>\n"
                        for i, genre in enumerate(complete_data["genres"][:30], 1):
                            formatted += f"  {i}. {genre}\n"
                        if complete_data['total_genres'] > 30:
                            formatted += f"  ... y {complete_data['total_genres'] - 30} g√©neros m√°s\n"
                        formatted += "\n"
                
                # Si hay datos filtrados por artista, mostrarlos
                if complete_data.get("filtered_by_artist"):
                    filtered = complete_data["filtered_by_artist"]
                    formatted += f"\nüé§ <b>FILTRADO POR ARTISTA: {filtered['artist'].upper()}</b>\n"
                    formatted += f"üìä <b>ESTAD√çSTICAS DE {filtered['artist'].upper()}:</b>\n"
                    formatted += f"‚Ä¢ <b>Artistas coincidentes:</b> {filtered['total_matching_artists']}\n"
                    formatted += f"‚Ä¢ <b>√Ålbumes:</b> {filtered['total_albums']}\n"
                    formatted += f"‚Ä¢ <b>Canciones:</b> {filtered['total_tracks']}\n\n"
                    
                    # Mostrar artistas coincidentes
                    if filtered.get("matching_artists"):
                        formatted += f"üé§ <b>ARTISTAS COINCIDENTES:</b>\n"
                        for i, artist in enumerate(filtered["matching_artists"][:10], 1):
                            formatted += f"  {i}. {artist.name}"
                            if artist.album_count:
                                formatted += f" ({artist.album_count} √°lbumes)"
                            formatted += "\n"
                        if filtered['total_matching_artists'] > 10:
                            formatted += f"  ... y {filtered['total_matching_artists'] - 10} artistas m√°s\n"
                        formatted += "\n"
                    
                    # Mostrar √°lbumes del artista
                    if filtered.get("albums"):
                        formatted += f"üìÄ <b>√ÅLBUMES DE {filtered['artist'].upper()}:</b>\n"
                        for i, album in enumerate(filtered["albums"][:15], 1):
                            formatted += f"  {i}. {album.name}"
                            if album.year:
                                formatted += f" ({album.year})"
                            formatted += "\n"
                        if filtered['total_albums'] > 15:
                            formatted += f"  ... y {filtered['total_albums'] - 15} √°lbumes m√°s\n"
                        formatted += "\n"
                
                formatted += f"üí° <b>NOTA:</b> Esta es informaci√≥n completa de toda tu biblioteca musical\n\n"
            
            if lib.get("search_results"):
                results = lib["search_results"]
                
                # Si es b√∫squeda por g√©nero, indicarlo claramente
                if is_genre_search:
                    formatted += f"\nüìö === BIBLIOTECA LOCAL - B√öSQUEDA POR G√âNERO ===\n"
                    formatted += f"üé∏ G√âNERO DETECTADO: {detected_genre.upper()}\n"
                    formatted += f"üí° El usuario pide RECOMENDACI√ìN de {detected_genre} de su biblioteca\n\n"
                
                # Priorizar √°lbumes si existen
                if results.get("albums"):
                    if not is_genre_search:
                        formatted += f"\nüìö === BIBLIOTECA LOCAL === \n"
                        formatted += f"üìÄ √ÅLBUMES ENCONTRADOS PARA '{search_term.upper()}' ({len(results['albums'])}):\n"
                        formatted += f"‚ö†Ô∏è IMPORTANTE: Verifica que el ARTISTA coincida con lo solicitado\n\n"
                    else:
                        formatted += f"üìÄ √ÅLBUMES DE {detected_genre.upper()} EN BIBLIOTECA ({len(results['albums'])}):\n"
                        formatted += f"üí° Recomienda UNO O VARIOS de estos seg√∫n el gusto del usuario\n\n"
                    
                    for i, album in enumerate(results["albums"][:20], 1):
                        formatted += f"  {i}. {album.artist} - {album.name}"
                        if album.year:
                            formatted += f" ({album.year})"
                        if album.track_count:
                            formatted += f" [{album.track_count} canciones]"
                        formatted += "\n"
                    formatted += "\n"
                
                # Luego artistas
                if results.get("artists"):
                    if not results.get("albums"):  # Solo mostrar si no hay √°lbumes
                        formatted += f"\nüìö === BIBLIOTECA LOCAL === \n"
                    formatted += f"üé§ ARTISTAS ENCONTRADOS EN BIBLIOTECA ({len(results['artists'])}):\n"
                    formatted += f"‚ö†Ô∏è Verifica que el nombre coincida con lo que pidi√≥ el usuario\n\n"
                    for i, artist in enumerate(results["artists"][:10], 1):
                        formatted += f"  {i}. ARTISTA: {artist.name}"
                        if artist.album_count:
                            formatted += f" | {artist.album_count} √°lbumes disponibles"
                        formatted += "\n"
                    formatted += "\n"
                
                # Luego canciones
                if results.get("tracks"):
                    if not results.get("albums") and not results.get("artists"):
                        formatted += f"\nüìö === BIBLIOTECA LOCAL === \n"
                    formatted += f"üéµ CANCIONES ENCONTRADAS EN BIBLIOTECA ({len(results['tracks'])}):\n"
                    formatted += f"‚ö†Ô∏è Verifica que el ARTISTA coincida\n\n"
                    for i, track in enumerate(results["tracks"][:10], 1):
                        formatted += f"  {i}. ARTISTA: {track.artist} | CANCI√ìN: {track.title}"
                        if track.album:
                            formatted += f" | √ÅLBUM: {track.album}"
                        if track.year:
                            formatted += f" [{track.year}]"
                        formatted += "\n"
                    formatted += "\n"
            
            # Si no se encontr√≥ nada, indicarlo claramente
            if lib.get("has_content") == False:
                formatted += f"\nüìö === BIBLIOTECA LOCAL === \n"
                formatted += f"‚ö†Ô∏è NO TIENES '{search_term.upper()}' EN TU BIBLIOTECA\n\n"
        
        # Historial de escucha (ListenBrainz) - SOLO SI ES RELEVANTE
        if data.get("listening_history"):
            hist = data["listening_history"]
            
            # ESCUCHAS RECIENTES (orden cronol√≥gico) - CR√çTICO para consultas de "√∫ltimos"
            if hist.get("recent_tracks"):
                recent = hist["recent_tracks"]
                formatted += f"\nüïê === HISTORIAL RECIENTE (orden cronol√≥gico, M√ÅS RECIENTE PRIMERO) ===\n"
                formatted += f"‚ö†Ô∏è IMPORTANTE: Usa ESTOS datos cuando pregunten por '√∫ltimos/recientes' escuchados\n\n"
                
                # Mostrar √∫ltimas escuchas
                formatted += f"üìù √öLTIMAS ESCUCHAS:\n"
                for i, track in enumerate(recent[:15], 1):
                    formatted += f"  {i}. {track.artist} - {track.name}"
                    if track.date:
                        formatted += f" (escuchado: {track.date.strftime('%Y-%m-%d %H:%M')})"
                    formatted += "\n"
                
                # Extraer artistas √∫nicos en orden cronol√≥gico
                from collections import OrderedDict
                unique_artists = OrderedDict()
                for track in recent:
                    if track.artist and track.artist not in unique_artists:
                        unique_artists[track.artist] = True
                
                if unique_artists:
                    formatted += f"\nüé§ √öLTIMOS ARTISTAS √öNICOS (en orden cronol√≥gico):\n"
                    for i, artist in enumerate(list(unique_artists.keys())[:10], 1):
                        formatted += f"  {i}. {artist}\n"
                
                formatted += f"\nüí° Si preguntan '√∫ltimos 3/5/N artistas' ‚Üí USA ESTA LISTA (no top artists)\n\n"
            
            # Estad√≠sticas generales
            if hist.get("stats"):
                stats = hist["stats"]
                formatted += f"\nüìä === ESTAD√çSTICAS GENERALES ===\n"
                formatted += f"  ‚Ä¢ Total de escuchas: {stats.get('total_listens', 'N/A')}\n"
                formatted += f"  ‚Ä¢ Artistas √∫nicos: {stats.get('total_artists', 'N/A')}\n"
                formatted += f"  ‚Ä¢ √Ålbumes √∫nicos: {stats.get('total_albums', 'N/A')}\n"
                formatted += f"  ‚Ä¢ Canciones √∫nicas: {stats.get('total_tracks', 'N/A')}\n\n"
            
            # Top artists (por cantidad, NO por cronolog√≠a)
            if hist.get("top_artists"):
                formatted += f"\nüèÜ TUS TOP ARTISTAS M√ÅS ESCUCHADOS (por cantidad total):\n"
                formatted += f"‚ö†Ô∏è NOTA: Estos son los M√ÅS ESCUCHADOS, NO los m√°s recientes\n"
                for i, artist in enumerate(hist["top_artists"][:5], 1):
                    formatted += f"  {i}. {artist.name}"
                    if artist.playcount:
                        formatted += f" ({artist.playcount} escuchas)"
                    formatted += "\n"
                formatted += "\n"
        
        # Informaci√≥n de MusicBrainz sobre artista espec√≠fico
        if data.get("musicbrainz_artist_info"):
            info = data["musicbrainz_artist_info"]
            formatted += f"\nüåç === INFORMACI√ìN DE MUSICBRAINZ: {info['artist'].upper()} ===\n"
            formatted += f"üìä TOP √ÅLBUMES M√ÅS POPULARES (seg√∫n MusicBrainz):\n\n"
            for i, album in enumerate(info["top_albums"][:10], 1):
                # Puede ser dict o objeto
                if isinstance(album, dict):
                    album_name = album.get('name', 'Unknown')
                    playcount = album.get('playcount', 0)
                    url = album.get('url', '')
                else:
                    album_name = getattr(album, 'name', 'Unknown')
                    playcount = getattr(album, 'playcount', 0)
                    url = getattr(album, 'url', '')
                
                formatted += f"  {i}. {album_name}"
                if playcount:
                    formatted += f" - {playcount:,} escuchas globales"
                if url:
                    formatted += f" | {url}"
                formatted += "\n"
            formatted += "\nüí° IMPORTANTE: Usa esta info para recomendar el mejor √°lbum\n"
            formatted += f"üí° Combina lo que tiene en biblioteca + informaci√≥n de MusicBrainz\n\n"
        
        # Contenido similar
        if data.get("similar_content"):
            formatted += f"\nüîó ARTISTAS SIMILARES:\n"
            for i, artist in enumerate(data["similar_content"][:5], 1):
                url_info = f" - {artist.url}" if hasattr(artist, 'url') and artist.url else ""
                formatted += f"  {i}. {artist.name}{url_info}\n"
        
        # LANZAMIENTOS RECIENTES (m√∫sica nueva de artistas de la biblioteca)
        if data.get("recent_releases"):
            formatted += f"\nüÜï === LANZAMIENTOS RECIENTES DE TUS ARTISTAS ===\n"
            formatted += f"üìÖ √öltimos 30 d√≠as - M√∫sica nueva de artistas en tu biblioteca\n\n"
            
            for i, release in enumerate(data["recent_releases"][:10], 1):
                title = release.get('title', 'Unknown')
                artist = release.get('artist', 'Unknown')
                date = release.get('date', '')
                release_type = release.get('type', 'album')
                url = release.get('url', '')
                
                formatted += f"  {i}. **{title}** - {artist}"
                if date:
                    formatted += f" ({date})"
                if release_type:
                    formatted += f" [{release_type}]"
                if url:
                    formatted += f" - {url}"
                formatted += "\n"
            
            formatted += "\nüí° Estos son lanzamientos recientes de artistas que ya tienes en tu biblioteca\n"
        
        # NUEVO: Descubrimientos (m√∫sica que NO est√° en biblioteca pero puede recomendar)
        if data.get("new_discoveries"):
            formatted += f"\nüåç === M√öSICA NUEVA PARA DESCUBRIR (de ListenBrainz) ===\n"
            formatted += f"üìå IMPORTANTE: Estos NO est√°n en tu biblioteca pero PUEDES recomendarlos\n"
            formatted += f"üéØ Basado en tus gustos, te pueden gustar:\n\n"
            
            for i, discovery in enumerate(data["new_discoveries"][:8], 1):
                # Puede ser dict (nuevo formato) o objeto (formato antiguo)
                if isinstance(discovery, dict):
                    artist = discovery.get('artist', 'Unknown')
                    album = discovery.get('top_album')
                    similar_to = discovery.get('similar_to', '')
                    url = discovery.get('url', '')
                    
                    formatted += f"  {i}. **{artist}**"
                    if album:
                        formatted += f" - √Ålbum recomendado: **{album}**"
                    if similar_to:
                        formatted += f" (similar a {similar_to})"
                    if url:
                        formatted += f" - {url}"
                    formatted += "\n"
                else:
                    # Formato antiguo (compatibilidad)
                    formatted += f"  {i}. {discovery.name}"
                    if hasattr(discovery, 'url') and discovery.url:
                        formatted += f" - {discovery.url}"
                    formatted += "\n"
            
            formatted += "\nüí° Recomienda estos √°lbumes/artistas libremente - son descubrimientos basados en sus gustos\n"
        
        # Si no hay datos
        if not formatted:
            formatted = "\n‚ö†Ô∏è No hay datos disponibles para responder esta consulta.\n"
        
        # Informaci√≥n sobre b√∫squeda incremental disponible
        if data.get("library", {}).get("can_search_more"):
            stats = data["library"]["mb_stats"]
            formatted += f"\nüí° === B√öSQUEDA INCREMENTAL DISPONIBLE ===\n"
            formatted += f"‚úì Verificados hasta ahora: {stats['checked']}/{stats['total']} artistas\n"
            formatted += f"‚úì Quedan por verificar: {stats['remaining']} artistas\n"
            formatted += f"\nüí¨ IMPORTANTE: Menciona al usuario que puede decir 'busca m√°s' para verificar m√°s artistas.\n"
            formatted += f"Ejemplo: 'He verificado {stats['checked']} artistas de tu biblioteca. Si quieres que busque m√°s a fondo, dime \"busca m√°s\".'\n\n"
        
        return formatted
    
    def _extract_links(self, data: Dict[str, Any]) -> List[str]:
        """Extraer todos los enlaces relevantes del contexto
        
        Args:
            data: Diccionario con todos los datos
            
        Returns:
            Lista de URLs √∫nicas de MusicBrainz/ListenBrainz
        """
        links = []
        
        # Enlaces del historial de escucha
        if hist := data.get("listening_history"):
            # De tracks recientes
            for track in hist.get("recent_tracks", []):
                if hasattr(track, 'url') and track.url:
                    links.append(track.url)
            
            # De top artistas
            for artist in hist.get("top_artists", []):
                if hasattr(artist, 'url') and artist.url:
                    links.append(artist.url)
            
            # De top tracks
            for track in hist.get("top_tracks", []):
                if hasattr(track, 'url') and track.url:
                    links.append(track.url)
        
        # Enlaces de contenido similar
        for item in data.get("similar_content", []):
            if hasattr(item, 'url') and item.url:
                links.append(item.url)
        
        # Eliminar duplicados manteniendo el orden
        seen = set()
        unique_links = []
        for link in links:
            if link not in seen:
                seen.add(link)
                unique_links.append(link)
        
        return unique_links
    
    async def get_artist_info(self, artist_name: str) -> Dict[str, Any]:
        """Obtener informaci√≥n completa sobre un artista
        
        Args:
            artist_name: Nombre del artista
            
        Returns:
            Diccionario con informaci√≥n del artista
        """
        info = {
            "name": artist_name,
            "in_library": False,
            "listening_stats": {},
            "similar_artists": [],
            "top_albums": [],
            "top_tracks": []
        }
        
        # Buscar en biblioteca
        try:
            library_results = await self.navidrome.search(artist_name, limit=5)
            if library_results.get("artists"):
                info["in_library"] = True
                info["library_albums"] = library_results.get("albums", [])
                info["library_tracks"] = library_results.get("tracks", [])
        except Exception as e:
            print(f"Error buscando en biblioteca: {e}")
        
        # Informaci√≥n de descubrimiento (ListenBrainz + MusicBrainz)
        if self.discovery_service:
            try:
                # Artistas similares usando ListenBrainz CF o MusicBrainz
                info["similar_artists"] = await self.discovery_service.get_similar_artists_from_recording(
                    artist_name, 
                    limit=5,
                    musicbrainz_service=self.musicbrainz
                )
            except Exception as e:
                print(f"Error obteniendo artistas similares: {e}")
        
        # Informaci√≥n de MusicBrainz
        if self.musicbrainz:
            try:
                # Top √°lbumes
                info["top_albums"] = await self.musicbrainz.get_artist_top_albums(artist_name, limit=5)
                
                # Top tracks  
                info["top_tracks"] = await self.musicbrainz.get_artist_top_tracks(artist_name, limit=5)
            except Exception as e:
                print(f"Error obteniendo info de MusicBrainz: {e}")
        
        return info
    
    def _filter_relevant_results(self, results: Dict[str, List], search_term: str) -> Dict[str, List]:
        """Filtrar resultados de b√∫squeda para mantener solo los relevantes
        
        Elimina resultados que claramente NO coincidan con el artista buscado.
        Ej: Si buscas "Tobog√°n Andaluz", elimina "El Perro Andaluz"
        
        Args:
            results: Resultados de b√∫squeda de Navidrome
            search_term: T√©rmino que el usuario busc√≥
            
        Returns:
            Resultados filtrados
        """
        from difflib import SequenceMatcher
        import unicodedata
        
        def normalize_text(text: str) -> str:
            """Normalizar texto: eliminar tildes/acentos, puntuaci√≥n y convertir a min√∫sculas
            
            Ejemplos:
                "Tobog√°n Andaluz" -> "tobogan andaluz"
                "Kase.O" -> "kaseo"
                "El Mat√≥ a un Polic√≠a" -> "el mato a un policia"
            """
            import re
            # Normalizar caracteres Unicode (NFD separa base + diacr√≠ticos)
            nfd = unicodedata.normalize('NFD', text)
            # Eliminar diacr√≠ticos (categor√≠a 'Mn' = Nonspacing Mark)
            without_accents = ''.join(c for c in nfd if unicodedata.category(c) != 'Mn')
            # Convertir a min√∫sculas
            lowercased = without_accents.lower()
            # Eliminar puntuaci√≥n (excepto espacios)
            # Mantener letras, n√∫meros y espacios; eliminar puntos, comas, guiones, etc.
            no_punctuation = re.sub(r'[^\w\s]', '', lowercased)
            # Normalizar espacios m√∫ltiples a uno solo
            normalized_spaces = re.sub(r'\s+', ' ', no_punctuation).strip()
            return normalized_spaces
        
        def similarity_ratio(a: str, b: str) -> float:
            """Calcular similitud entre dos strings (normalizados)"""
            return SequenceMatcher(None, normalize_text(a), normalize_text(b)).ratio()
        
        # Umbral de similitud (0.6 = 60% similar)
        SIMILARITY_THRESHOLD = 0.6
        
        filtered = {
            "tracks": [],
            "albums": [],
            "artists": []
        }
        
        # Normalizar el t√©rmino de b√∫squeda
        search_normalized = normalize_text(search_term)
        # Tambi√©n crear versi√≥n sin espacios para comparaciones (ej: "kase o" -> "kaseo")
        search_no_spaces = search_normalized.replace(' ', '')
        
        # Filtrar √°lbumes
        for album in results.get("albums", []):
            artist_similarity = similarity_ratio(album.artist, search_term)
            album_similarity = similarity_ratio(album.name, search_term)
            artist_normalized = normalize_text(album.artist)
            artist_no_spaces = artist_normalized.replace(' ', '')
            album_normalized = normalize_text(album.name)
            
            # MEJORADO: Mantener si (con normalizaci√≥n de texto):
            # 1. El t√©rmino de b√∫squeda est√° CONTENIDO en el nombre del artista
            # 2. El t√©rmino sin espacios coincide con el artista sin espacios (ej: "kase o" = "kaseo")
            # 3. El artista es similar al t√©rmino de b√∫squeda (60%+)
            # 4. El √°lbum contiene el t√©rmino de b√∫squeda
            if (search_normalized in artist_normalized or 
                search_no_spaces == artist_no_spaces or
                artist_normalized.startswith(search_normalized) or
                artist_similarity >= SIMILARITY_THRESHOLD or 
                search_normalized in album_normalized):
                filtered["albums"].append(album)
                print(f"   ‚úì √Ålbum mantenido: {album.artist} - {album.name} (similitud: {artist_similarity:.2f})")
            else:
                print(f"   ‚úó √Ålbum filtrado: {album.artist} - {album.name} (similitud: {artist_similarity:.2f})")
        
        # Filtrar artistas
        for artist in results.get("artists", []):
            artist_similarity = similarity_ratio(artist.name, search_term)
            artist_normalized = normalize_text(artist.name)
            artist_no_spaces = artist_normalized.replace(' ', '')
            
            # MEJORADO: Mantener si el t√©rmino est√° contenido, sin espacios coincide, o es similar
            if (search_normalized in artist_normalized or
                search_no_spaces == artist_no_spaces or
                artist_normalized.startswith(search_normalized) or
                artist_similarity >= SIMILARITY_THRESHOLD):
                filtered["artists"].append(artist)
                print(f"   ‚úì Artista mantenido: {artist.name} (similitud: {artist_similarity:.2f})")
            else:
                print(f"   ‚úó Artista filtrado: {artist.name} (similitud: {artist_similarity:.2f})")
        
        # Filtrar canciones
        for track in results.get("tracks", []):
            artist_similarity = similarity_ratio(track.artist, search_term)
            artist_normalized = normalize_text(track.artist)
            artist_no_spaces = artist_normalized.replace(' ', '')
            
            # MEJORADO: Mantener si el t√©rmino est√° contenido en el artista (normalizado)
            if (search_normalized in artist_normalized or
                search_no_spaces == artist_no_spaces or
                artist_normalized.startswith(search_normalized) or
                artist_similarity >= SIMILARITY_THRESHOLD):
                filtered["tracks"].append(track)
            else:
                print(f"   ‚úó Canci√≥n filtrada: {track.artist} - {track.title}")
        
        return filtered
    
    def _generate_search_variations(self, search_term: str) -> List[str]:
        """Generar variaciones de un t√©rmino de b√∫squeda para mayor flexibilidad
        
        Esto ayuda a encontrar artistas como "Kase.O" incluso si el usuario busca "kaseo" o "kase o"
        
        Args:
            search_term: T√©rmino de b√∫squeda original
            
        Returns:
            Lista de variaciones del t√©rmino
            
        Ejemplos:
            "kaseo" ‚Üí ["kaseo", "kase.o", "kase o", "kase. o"]
            "kase o" ‚Üí ["kase o", "kaseo", "kase.o"]
            "el mato" ‚Üí ["el mato", "elmato", "el.mato"]
        """
        variations = [search_term]  # Siempre incluir el original
        
        # Variaci√≥n sin espacios
        no_spaces = search_term.replace(' ', '')
        if no_spaces != search_term and no_spaces not in variations:
            variations.append(no_spaces)
        
        # Variaci√≥n con punto entre palabras (para artistas como "Kase.O")
        if ' ' in search_term:
            with_dot = search_term.replace(' ', '.')
            if with_dot not in variations:
                variations.append(with_dot)
            
            # Tambi√©n probar con punto y espacio
            with_dot_space = search_term.replace(' ', '. ')
            if with_dot_space not in variations:
                variations.append(with_dot_space)
        
        # Si no tiene espacios, probar agregando punto en diferentes posiciones
        # Especialmente √∫til para "kaseo" ‚Üí "kase.o", "elmato" ‚Üí "el.mato"
        if ' ' not in search_term and '.' not in search_term and len(search_term) > 3:
            # Probar punto antes de la √∫ltima letra
            with_dot_last = search_term[:-1] + '.' + search_term[-1]
            if with_dot_last not in variations:
                variations.append(with_dot_last)
            
            # Tambi√©n probar con espacio antes de la √∫ltima letra
            with_space_last = search_term[:-1] + ' ' + search_term[-1]
            if with_space_last not in variations:
                variations.append(with_space_last)
        
        print(f"üîç Generadas {len(variations)} variaciones para '{search_term}'")
        return variations
    
    def _extract_artist_from_query(self, query: str) -> Optional[str]:
        """Extraer nombre de artista de consultas como 'que tengo de X'"""
        import re
        
        # Patrones para extraer artista
        patterns = [
            r'que tengo de (?:la |el |los |las )?([^?]+)',
            r'qu√© tengo de (?:la |el |los |las )?([^?]+)',
            r'tengo de (?:la |el |los |las )?([^?]+)',
            r'tienes de (?:la |el |los |las )?([^?]+)',
            r'de (?:la |el |los |las )?([^?]+) en mi biblioteca',
            r'de (?:la |el |los |las )?([^?]+) tengo'
        ]
        
        query_lower = query.lower()
        for pattern in patterns:
            match = re.search(pattern, query_lower)
            if match:
                artist_name = match.group(1).strip()
                # Limpiar caracteres extra
                artist_name = re.sub(r'[?¬ø!¬°.,;:]', '', artist_name).strip()
                if artist_name and len(artist_name) > 1:
                    return artist_name
        
        return None

    def _extract_search_term(self, query: str) -> str:
        """Extraer el t√©rmino de b√∫squeda real de una consulta en lenguaje natural
        
        Ejemplos:
            "¬øQu√© √°lbumes de Pink Floyd tengo?" -> "Pink Floyd"
            "Busca Queen en mi biblioteca" -> "Queen"
            "Tengo discos de The Beatles?" -> "The Beatles"
        
        Args:
            query: Consulta en lenguaje natural
            
        Returns:
            T√©rmino de b√∫squeda extra√≠do
        """
        import re
        
        # Palabras a ignorar (stop words en espa√±ol)
        stop_words = {
            'qu√©', 'que', 'cual', 'cu√°l', 'cuales', 'cu√°les', 'c√≥mo', 'como',
            'de', 'del', 'la', 'el', 'los', 'las', 'un', 'una', 'unos', 'unas',
            'tengo', 'tienes', 'tiene', 'en', 'mi', 'tu', 'su',
            'biblioteca', 'colecci√≥n', '√°lbum', '√°lbumes', 'album', 'albums',
            'disco', 'discos', 'canci√≥n', 'canciones', 'cancion',
            'artista', 'artistas', 'por', 'para', 'con', 'sin',
            'hay', 'est√°', 'esta', 'est√°n', 'estan', 'son', 'es',
            'busca', 'buscar', 'encuentra', 'encontrar', 'dame', 'dime',
            'muestra', 'mostrar', 'ver', 'a', 'e', 'i', 'o', 'u', 'y',
            'mejor', 'peor'
        }
        
        # ESTRATEGIA 1: Buscar patr√≥n "de [artista]" (M√ÅS CONFIABLE)
        # Esta estrategia debe ir PRIMERA porque es m√°s espec√≠fica y evita confusiones
        # Ejemplo: "Cual es el mejor disco de el mat√≥?" ‚Üí extrae "el mat√≥"
        de_patterns = [
            # Patr√≥n espec√≠fico para "mejor/peor disco/√°lbum de X"
            r'(?:mejor|peor)\s+(?:disco|√°lbum|album)\s+de\s+(.+?)(?:\?|$)',
            # Patr√≥n para "disco/√°lbum de X"
            r'(?:disco|√°lbum|album)\s+de\s+(.+?)(?:\?|$)',
            # Patr√≥n general "de X" (cuando no hay palabras anteriores conflictivas)
            r'\bde\s+([a-z√°√©√≠√≥√∫√±][a-z√°√©√≠√≥√∫√±\s]+?)(?:\?|$)'
        ]
        
        for de_pattern in de_patterns:
            de_match = re.search(de_pattern, query, re.IGNORECASE)
            if de_match:
                result = de_match.group(1).strip()
                # Limpiar palabras comunes al final
                result = re.sub(r'\s+(tengo|teengo|en|mi|tu|biblioteca|es|son)$', '', result, flags=re.IGNORECASE)
                # Limpiar interrogantes y espacios
                result = result.rstrip('? ').strip()
                # Verificar que no sea solo stop words
                words = result.lower().split()
                if result and len(result) > 2 and not all(w in stop_words for w in words):
                    print(f"üîç T√©rmino extra√≠do (patr√≥n 'de'): '{result}'")
                    return result
        
        # ESTRATEGIA 2: Buscar nombres propios (palabras con may√∫sculas)
        # Pero filtrar palabras interrogativas comunes que podr√≠an estar al inicio
        capitalized_pattern = r'\b([A-Z][a-z√°√©√≠√≥√∫√±]+(?:\s+[A-Z][a-z√°√©√≠√≥√∫√±]+)*)\b'
        cap_matches = re.findall(capitalized_pattern, query)
        
        if cap_matches:
            # Filtrar palabras interrogativas aunque tengan may√∫scula
            question_words = {'cual', 'cu√°l', 'qu√©', 'que', 'qui√©n', 'quien', 'c√≥mo', 'como', 'd√≥nde', 'donde', 'cu√°ndo', 'cuando'}
            filtered_matches = [m for m in cap_matches if m.lower() not in question_words and m.lower() not in stop_words]
            
            if filtered_matches:
                result = ' '.join(filtered_matches)
                print(f"üîç T√©rmino extra√≠do (may√∫sculas filtradas): '{result}'")
                return result
        
        # ESTRATEGIA 3: Buscar despu√©s de palabras clave espec√≠ficas
        keywords_patterns = [
            r'(?:discos?|√°lbumes?|albums?)\s+(?:de\s+)?([a-zA-Z][a-zA-Z\s]+?)(?:\s+tengo|\s+teengo|\?|$)',
            r'(?:tengo|teengo)\s+(?:de\s+)?([a-zA-Z][a-zA-Z\s]+?)(?:\s+en|\?|$)',
        ]
        
        for pattern in keywords_patterns:
            match = re.search(pattern, query, re.IGNORECASE)
            if match:
                result = match.group(1).strip()
                # Limpiar stop words
                result = re.sub(r'\s+(de|en|mi|tu|la|el|los|las)$', '', result, flags=re.IGNORECASE)
                if result and len(result) > 2:
                    print(f"üîç T√©rmino extra√≠do (keywords): '{result}'")
                    return result
        
        # Limpiar la query de signos de puntuaci√≥n
        query_clean = re.sub(r'[¬ø?¬°!.,;:]', '', query.lower())
        
        # Dividir en palabras
        words = query_clean.split()
        
        # Filtrar stop words
        meaningful_words = [w for w in words if w not in stop_words and len(w) > 2]
        
        # Unir las palabras significativas
        result = ' '.join(meaningful_words)
        
        print(f"üîç T√©rmino extra√≠do (filtrado): '{result}'")
        return result if result else query
    
    async def _search_genre_with_musicbrainz(
        self, 
        genre: str, 
        offset: int = 0
    ) -> Dict[str, Any]:
        """Usar MusicBrainz para buscar artistas de un g√©nero en la biblioteca
        
        Args:
            genre: G√©nero musical a buscar
            offset: Desde qu√© artista empezar (para b√∫squedas incrementales)
            
        Returns:
            Diccionario con resultados y metadata de b√∫squeda
        """
        try:
            # OPTIMIZACI√ìN: Reducir de 500 a 300 tracks para mejorar velocidad
            library_tracks = await self.navidrome.get_tracks(limit=300)
            
            # Extraer artistas √∫nicos
            unique_artists = list(set([track.artist for track in library_tracks if track.artist]))
            print(f"      Total de artistas en biblioteca: {len(unique_artists)}")
            
            # Preparar filtros
            filters = {"genre": genre}
            
            # Verificar artistas usando batch size configurable
            mb_data = await self.musicbrainz.find_matching_artists_in_library(
                unique_artists,
                filters,
                max_artists=None,  # Usar√° MUSICBRAINZ_BATCH_SIZE
                offset=offset
            )
            
            if not mb_data or not mb_data.get("artists"):
                return {
                    "results": {"tracks": [], "albums": [], "artists": []},
                    "offset": mb_data.get("offset", offset) if mb_data else offset,
                    "next_offset": mb_data.get("next_offset", offset) if mb_data else offset,
                    "has_more": mb_data.get("has_more", False) if mb_data else False,
                    "total_artists": mb_data.get("total_artists", 0) if mb_data else 0,
                    "checked_this_batch": mb_data.get("checked_this_batch", 0) if mb_data else 0
                }
            
            # Extraer nombres de artistas que coinciden
            matching_artist_names = set([a["name"].lower() for a in mb_data["artists"]])
            print(f"      ‚úÖ Artistas coincidentes: {list(matching_artist_names)}")
            
            # Buscar en Navidrome los artistas verificados
            results = {"tracks": [], "albums": [], "artists": []}
            
            for artist_name in list(matching_artist_names)[:10]:  # Limitar a 10 artistas
                artist_results = await self.navidrome.search(artist_name, limit=20)
                
                # Combinar resultados
                for track in artist_results.get("tracks", []):
                    if track not in results["tracks"]:
                        results["tracks"].append(track)
                
                for album in artist_results.get("albums", []):
                    if album not in results["albums"]:
                        results["albums"].append(album)
                
                for artist in artist_results.get("artists", []):
                    if artist not in results["artists"]:
                        results["artists"].append(artist)
            
            return {
                "results": results,
                "offset": mb_data["offset"],
                "next_offset": mb_data["next_offset"],
                "has_more": mb_data["has_more"],
                "total_artists": mb_data["total_artists"],
                "checked_this_batch": mb_data["checked_this_batch"]
            }
            
        except Exception as e:
            print(f"      ‚ùå Error en b√∫squeda MusicBrainz: {e}")
            return {
                "results": {"tracks": [], "albums": [], "artists": []},
                "offset": offset,
                "next_offset": offset,
                "has_more": False,
                "total_artists": 0,
                "checked_this_batch": 0
            }
    
    async def _get_minimal_context(self, user_id: int) -> Dict:
        """NIVEL 1: Contexto m√≠nimo y r√°pido (SIEMPRE se ejecuta)
        
        Obtiene solo la informaci√≥n m√°s b√°sica con cach√© largo (1 hora).
        Esto hace que el agente siempre tenga una idea general de tu m√∫sica.
        
        Args:
            user_id: ID del usuario
            
        Returns:
            Diccionario con contexto m√≠nimo
        """
        cache_key = f"minimal_context_{user_id}"
        cached = self._get_cache(cache_key, ttl_seconds=3600)  # 1 hora
        
        if cached:
            print("‚ö° Usando contexto m√≠nimo en cach√© (1h)")
            return cached
        
        context = {}
        
        try:
            # Solo obtener top 3 artistas (muy r√°pido)
            if self.listenbrainz:
                top_artists = await self.listenbrainz.get_top_artists(limit=3)
                if top_artists:
                    context['top_artists'] = [a.name for a in top_artists]
                    print(f"‚úÖ Contexto m√≠nimo obtenido: {len(top_artists)} top artistas")
        except Exception as e:
            print(f"‚ö†Ô∏è Error obteniendo contexto m√≠nimo: {e}")
        
        # Guardar en cach√© por 1 hora
        self._set_cache(cache_key, context, ttl_seconds=3600)
        return context
    
    async def _get_enriched_context(self, user_id: int, base_context: Dict) -> Dict:
        """NIVEL 2: Contexto enriquecido para recomendaciones
        
        Agrega informaci√≥n m√°s detallada cuando se detectan palabras de recomendaci√≥n.
        Usa cach√© de 10 minutos.
        
        Args:
            user_id: ID del usuario
            base_context: Contexto m√≠nimo ya obtenido
            
        Returns:
            Diccionario con contexto enriquecido
        """
        cache_key = f"enriched_context_{user_id}"
        cached = self._get_cache(cache_key, ttl_seconds=600)  # 10 minutos
        
        if cached:
            print("‚ö° Usando contexto enriquecido en cach√© (10min)")
            return {**base_context, **cached}
        
        enriched = dict(base_context)  # Copiar contexto base
        
        try:
            if self.listenbrainz:
                # Paralelizar obtenci√≥n de datos
                tasks = []
                
                # Top 10 artistas (si no est√°n en el base)
                if 'top_artists' not in enriched or len(enriched['top_artists']) < 10:
                    tasks.append(self.listenbrainz.get_top_artists(limit=10))
                else:
                    tasks.append(asyncio.sleep(0))
                
                # √öltimas 5 escuchas
                tasks.append(self.listenbrainz.get_recent_tracks(limit=5))
                
                results = await asyncio.gather(*tasks, return_exceptions=True)
                
                # Procesar resultados
                if not isinstance(results[0], Exception) and results[0]:
                    enriched['top_artists'] = [a.name for a in results[0]]
                
                if len(results) > 1 and not isinstance(results[1], Exception) and results[1]:
                    enriched['last_track'] = f"{results[1][0].artist} - {results[1][0].name}"
                    enriched['recent_tracks'] = [
                        f"{t.artist} - {t.name}" for t in results[1][:5]
                    ]
                
                print(f"‚úÖ Contexto enriquecido obtenido: {len(enriched.get('top_artists', []))} top artistas, {len(enriched.get('recent_tracks', []))} tracks recientes")
        except Exception as e:
            print(f"‚ö†Ô∏è Error obteniendo contexto enriquecido: {e}")
        
        # Guardar en cach√© por 10 minutos
        cache_data = {k: v for k, v in enriched.items() if k not in base_context}
        self._set_cache(cache_key, cache_data, ttl_seconds=600)
        
        return enriched
    
    async def _get_full_context(self, user_id: int, base_context: Dict) -> Dict:
        """NIVEL 3: Contexto completo para consultas de perfil
        
        Obtiene toda la informaci√≥n disponible cuando el usuario pregunta
        espec√≠ficamente por su biblioteca o estad√≠sticas.
        Usa cach√© de 5 minutos.
        
        Args:
            user_id: ID del usuario
            base_context: Contexto ya obtenido (m√≠nimo o enriquecido)
            
        Returns:
            Diccionario con contexto completo
        """
        cache_key = f"full_context_{user_id}"
        cached = self._get_cache(cache_key, ttl_seconds=300)  # 5 minutos
        
        if cached:
            print("‚ö° Usando contexto completo en cach√© (5min)")
            return {**base_context, **cached}
        
        full = dict(base_context)  # Copiar contexto base
        
        try:
            if self.listenbrainz:
                # Obtener estad√≠sticas completas
                tasks = [
                    self.listenbrainz.get_top_artists(limit=15),
                    self.listenbrainz.get_recent_tracks(limit=20),
                ]
                
                # Si tiene m√©todo de estad√≠sticas, agregarlo
                if hasattr(self.listenbrainz, 'get_user_stats'):
                    tasks.append(self.listenbrainz.get_user_stats())
                
                results = await asyncio.gather(*tasks, return_exceptions=True)
                
                # Procesar top artists
                if not isinstance(results[0], Exception) and results[0]:
                    full['top_artists'] = [a.name for a in results[0]]
                    full['favorite_genres'] = list(set([
                        getattr(a, 'genre', None) for a in results[0] 
                        if getattr(a, 'genre', None)
                    ]))[:5]
                
                # Procesar tracks recientes
                if len(results) > 1 and not isinstance(results[1], Exception) and results[1]:
                    recent = results[1]
                    full['last_track'] = f"{recent[0].artist} - {recent[0].name}"
                    full['recent_tracks'] = [f"{t.artist} - {t.name}" for t in recent[:10]]
                    
                    # Extraer artistas √∫nicos recientes
                    full['recent_artists'] = []
                    seen = set()
                    for t in recent:
                        if t.artist not in seen:
                            full['recent_artists'].append(t.artist)
                            seen.add(t.artist)
                
                # Procesar estad√≠sticas (si existen)
                if len(results) > 2 and not isinstance(results[2], Exception) and results[2]:
                    full['stats'] = results[2]
                
                print(f"‚úÖ Contexto completo obtenido: {len(full.get('top_artists', []))} top artistas, {len(full.get('recent_tracks', []))} tracks recientes")
        except Exception as e:
            print(f"‚ö†Ô∏è Error obteniendo contexto completo: {e}")
        
        # Guardar en cach√© por 5 minutos
        cache_data = {k: v for k, v in full.items() if k not in base_context}
        self._set_cache(cache_key, cache_data, ttl_seconds=300)
        
        return full
    
    async def _create_playlist_in_navidrome(
        self, 
        user_question: str, 
        data_context: Dict[str, Any], 
        user_id: int
    ) -> Optional[Dict[str, Any]]:
        """Crear playlist en Navidrome basada en la consulta del usuario
        
        Args:
            user_question: Pregunta original del usuario
            data_context: Datos recopilados de la consulta
            user_id: ID del usuario
            
        Returns:
            Diccionario con informaci√≥n de la playlist creada o None si falla
        """
        try:
            print(f"üéµ Creando playlist en Navidrome para: {user_question}")
            
            # Extraer nombre de la playlist de la consulta
            playlist_name = self._extract_playlist_name(user_question)
            
            # Obtener canciones de los datos de contexto
            song_ids = await self._extract_song_ids_from_context(data_context)
            
            if not song_ids:
                print("‚ö†Ô∏è No se encontraron canciones para la playlist")
                return None
            
            # Limitar a 50 canciones m√°ximo (l√≠mite de Navidrome)
            if len(song_ids) > 50:
                song_ids = song_ids[:50]
                print(f"‚ö†Ô∏è Limitando playlist a 50 canciones (ten√≠as {len(song_ids)})")
            
            # Crear playlist en Navidrome
            playlist_id = await self.navidrome.create_playlist(playlist_name, song_ids)
            
            if playlist_id:
                print(f"‚úÖ Playlist creada exitosamente: {playlist_name} (ID: {playlist_id})")
                return {
                    "id": playlist_id,
                    "name": playlist_name,
                    "track_count": len(song_ids),
                    "song_ids": song_ids
                }
            else:
                print("‚ùå No se pudo crear la playlist en Navidrome")
                return None
                
        except Exception as e:
            print(f"‚ùå Error creando playlist en Navidrome: {e}")
            return None
    
    def _extract_playlist_name(self, user_question: str) -> str:
        """Extraer nombre de playlist de la consulta del usuario
        
        Args:
            user_question: Consulta original del usuario
            
        Returns:
            Nombre de la playlist
        """
        import re
        
        # Patrones para extraer nombre de playlist
        patterns = [
            r'playlist\s+(?:de\s+|con\s+|para\s+)?(.+?)(?:\s+\d+\s+canciones?)?$',
            r'crea\s+(?:una\s+)?playlist\s+(?:de\s+|con\s+|para\s+)?(.+?)(?:\s+\d+\s+canciones?)?$',
            r'crear\s+(?:una\s+)?playlist\s+(?:de\s+|con\s+|para\s+)?(.+?)(?:\s+\d+\s+canciones?)?$',
            r'haz\s+(?:una\s+)?playlist\s+(?:de\s+|con\s+|para\s+)?(.+?)(?:\s+\d+\s+canciones?)?$',
            r'hacer\s+(?:una\s+)?playlist\s+(?:de\s+|con\s+|para\s+)?(.+?)(?:\s+\d+\s+canciones?)?$',
            r'genera\s+(?:una\s+)?playlist\s+(?:de\s+|con\s+|para\s+)?(.+?)(?:\s+\d+\s+canciones?)?$',
            r'generar\s+(?:una\s+)?playlist\s+(?:de\s+|con\s+|para\s+)?(.+?)(?:\s+\d+\s+canciones?)?$'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, user_question.lower())
            if match:
                name = match.group(1).strip()
                # Limpiar caracteres extra
                name = re.sub(r'[?¬ø!¬°.,;:]', '', name).strip()
                if name and len(name) > 2:
                    return name.title()
        
        # Fallback: usar parte de la consulta
        words = user_question.split()
        if len(words) > 2:
            # Tomar las √∫ltimas palabras como nombre
            return ' '.join(words[-3:]).title()
        
        return "Playlist Musicalo"
    
    async def _extract_song_ids_from_context(self, data_context: Dict[str, Any]) -> List[str]:
        """Extraer IDs de canciones de los datos de contexto
        
        Args:
            data_context: Datos recopilados de la consulta
            
        Returns:
            Lista de IDs de canciones
        """
        song_ids = []
        
        # Buscar en resultados de biblioteca
        if data_context.get("library", {}).get("search_results"):
            results = data_context["library"]["search_results"]
            
            # Priorizar tracks si est√°n disponibles
            if results.get("tracks"):
                for track in results["tracks"]:
                    if hasattr(track, 'id') and track.id:
                        song_ids.append(track.id)
            
            # Si no hay tracks, buscar en √°lbumes y obtener sus tracks
            elif results.get("albums"):
                print(f"üéµ Obteniendo tracks de {len(results['albums'])} √°lbumes...")
                for album in results["albums"][:5]:  # Limitar a 5 √°lbumes para evitar demasiadas canciones
                    try:
                        album_tracks = await self.navidrome.get_album_tracks(album.id)
                        for track in album_tracks:
                            if hasattr(track, 'id') and track.id:
                                song_ids.append(track.id)
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error obteniendo tracks del √°lbum {album.name}: {e}")
                        continue
        
        # Buscar en datos completos de biblioteca (solo si no hay resultados espec√≠ficos)
        if not song_ids and data_context.get("library", {}).get("complete_data"):
            complete_data = data_context["library"]["complete_data"]
            
            # Si hay datos filtrados por artista
            if complete_data.get("filtered_by_artist"):
                filtered = complete_data["filtered_by_artist"]
                for track in filtered.get("tracks", []):
                    if hasattr(track, 'id') and track.id:
                        song_ids.append(track.id)
            
            # Si hay tracks en los datos completos (solo como √∫ltimo recurso)
            elif complete_data.get("tracks"):
                print("‚ö†Ô∏è Usando datos generales de biblioteca como √∫ltimo recurso")
                for track in complete_data["tracks"][:20]:  # Limitar a 20
                    if hasattr(track, 'id') and track.id:
                        song_ids.append(track.id)
        
        # Eliminar duplicados manteniendo el orden
        seen = set()
        unique_song_ids = []
        for song_id in song_ids:
            if song_id not in seen:
                seen.add(song_id)
                unique_song_ids.append(song_id)
        
        print(f"üéµ Extra√≠dos {len(unique_song_ids)} IDs de canciones para la playlist")
        return unique_song_ids

    async def close(self):
        """Cerrar todas las conexiones"""
        try:
            await self.navidrome.close()
            if self.listenbrainz:
                await self.listenbrainz.close()
            if self.musicbrainz:
                await self.musicbrainz.close()
        except Exception as e:
            print(f"Error cerrando conexiones: {e}")

