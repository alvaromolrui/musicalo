name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  DOCKER_USERNAME: alvaromolrui
  IMAGE_NAME: musicalo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        run: |
          # Determinar tags seg√∫n el tipo de push
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # Es un tag (release)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            
            # Leer versi√≥n desde archivo VERSION para comparar
            CURRENT_VERSION=$(cat VERSION 2>/dev/null || echo "0.0.0")
            CURRENT_VERSION=$(echo "$CURRENT_VERSION" | tr -d '\n' | tr -d '\r')
            echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
            
            # Determinar si debe actualizar latest
            SHOULD_UPDATE_LATEST=true
            
            # Extraer n√∫meros de versi√≥n (ignorar sufijos como -alpha, -beta)
            TAG_VERSION=$(echo "$VERSION" | sed 's/-.*$//')
            FILE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-.*$//')
            
            # Comparar versiones
            if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
              echo "‚ö†Ô∏è Tag version ($TAG_VERSION) != VERSION file ($FILE_VERSION)"
              echo "latest_note=Version mismatch" >> $GITHUB_OUTPUT
              SHOULD_UPDATE_LATEST=false
            fi
            
            # Tags para release
            TAGS="${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${VERSION}"
            
            if [ "$SHOULD_UPDATE_LATEST" = true ]; then
              TAGS="${TAGS},${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
              echo "‚úÖ Se actualizar√° latest a $VERSION"
            else
              echo "‚ö†Ô∏è NO se actualizar√° latest (solo tag espec√≠fico: $VERSION)"
            fi
            
            {
              echo "tags<<EOF"
              echo "$TAGS"
              echo "EOF"
            } >> $GITHUB_OUTPUT
            
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            # Es push a main
            echo "version=main" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            
            # Tag para main: solo main (NO latest)
            TAGS="${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:main"
            {
              echo "tags<<EOF"
              echo "$TAGS"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          fi
          
          echo "üì¶ Tags a construir: $TAGS"
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=Musicalo
            org.opencontainers.image.description=Bot de Telegram con IA para recomendaciones musicales
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
      
      - name: Summary
        run: |
          echo "### üéâ Build Completado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Versi√≥n**: \`${{ steps.meta.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.meta.outputs.is_release }}" == "true" ]]; then
            echo "‚úÖ **Release** publicado en Docker Hub" >> $GITHUB_STEP_SUMMARY
            echo "üè∑Ô∏è Tag \`latest\` actualizado" >> $GITHUB_STEP_SUMMARY
          else
            echo "üîÑ Tag \`main\` actualizado (desarrollo)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üê≥ **Docker Hub**: https://hub.docker.com/r/${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY

